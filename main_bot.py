import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import MAIN_BOT_TOKEN, ADMIN_USERNAMES, CHANNEL_GETTER_BOT_LINK
import database as db
from keyboards import *


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher()
class ChangeLinkShortDesc(StatesGroup):
    waiting_for_description = State()

class ChangeLinkDesc(StatesGroup):
    waiting_for_description = State()

class AdminStats(StatesGroup):
    waiting_for_username = State()

class AdminLinkStats(StatesGroup):
    waiting_for_username_l = State()
class AdminStates(StatesGroup):
    add_channel_name = State()
    add_channel_ru_link = State()
    add_channel_en_link = State()
    add_channel_id = State()
    add_channel_paid = State()
    add_sub_cost = State()
    add_percent_for_arb = State()
    add_description = State()
class EditChannelState(StatesGroup):
    waiting_for_data = State()
@dp.message(Command("start"))
async def start(message: types.Message):
    user = message.from_user
    await db.register_user(user.id, user.username)
    
    keyboard = [
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="select_channel")],
        [InlineKeyboardButton(text="–ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="my_links")],
        [InlineKeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


@dp.callback_query(F.data == "my_links")
async def select_link(callback: types.CallbackQuery):
    links = await db.get_links(user_id=callback.from_user.id)
    if not links:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!", reply_markup=back_kb)
        await callback.answer()
        return

    keyboard = []
    for link in links:
        arbitrage_username, channel_id, link_id = link[4].split('-')
        channel = await db.get_channel(channel_id)
        keyboard.append([InlineKeyboardButton(
            text=channel[1] + " " + link[3] + " " + link[7],
            callback_data=f"link_{link[0]}"
        )])
    keyboard.append([InlineKeyboardButton(
        text="üëàüèΩ –ù–∞–∑–∞–¥",
        callback_data=f"back"
    )])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:",
        reply_markup=reply_markup
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("link_"))
async def link_selected(callback: types.CallbackQuery):
    try:
        link_id = int(callback.data.split("_")[1])
        link = await db.get_link(link_id=link_id)
        stats = await db.get_link_stats(link_id)
        if not stats:
            keyboard = [[InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="select_channel")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text(
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É.",
                reply_markup=reply_markup
            )
            await callback.answer()
            return
        channel = await db.get_channel(link[2])
        keyboard = []
        clicks = stats[0][0]
        paid = stats[0][1]
        free = stats[0][2]
        conv_total = (paid / clicks * 100) if clicks else 0
        conv1 = (free / clicks * 100) if clicks else 0
        conv2 = (paid / free * 100) if free else 0
        price = channel[7] if channel[7] != "" else 0
        percent = channel[8] if channel[8] != "" else 0
        owner_income = (price * percent) / 100
        text = (
            "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ</b>\n\n"
            f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {link[7]}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link[4]}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {link[6]}\n\n"

            f"üë• <b>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {clicks}\n"
            f"üÜì <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:</b> {free}\n"
            f"üí≥ <b>–ü–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {paid}\n\n"
        
            f"üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>\n"
            f"‚Ä¢ –ë–æ—Ç ‚Üí –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: <b>{conv1:.2f}%</b>\n"
            f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Üí –ü–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: <b>{conv2:.2f}%</b>\n\n"
            f"‚Ä¢ –ë–æ—Ç ‚Üí –ü–ª–∞—Ç–Ω—ã–π (–∏—Ç–æ–≥–æ–≤–∞—è): <b>{conv_total:.2f}%</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {channel[7]} —Ä—É–±\n"
            f"üéØ <b>–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂:</b> {channel[8]}%\n"
            f"üíµ <b>–í–∞—à –¥–æ—Ö–æ–¥ —Å –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b> {owner_income:.2f} —Ä—É–±\n"
            f"üíµ <b>–í–∞—à –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å —Å—Å—ã–ª–∫–∏</b> {owner_income*paid:.2f} —Ä—É–±\n"
        )

        keyboard.append([InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data=f"delete_link_{link_id}"
        )])
        keyboard.append([InlineKeyboardButton(
            text=f"‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f"changedesc_{link_id}"
        )])
        keyboard.append([InlineKeyboardButton(
            text=f"üñå –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f"changeshortdesc_{link_id}"
        )])
        keyboard.append([InlineKeyboardButton(text="üîÑ–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"link_{link_id}")])
        keyboard.append([InlineKeyboardButton(text="üëàüèΩ–ù–∞–∑–∞–¥", callback_data=f"back")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        await callback.answer("")
    except:
        await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@dp.callback_query(F.data == "select_channel")
async def select_channel(callback: types.CallbackQuery):
    channels = await db.get_channels(include_paid=False)
    if not channels:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        await callback.answer()
        return
    
    keyboard = []
    for channel in channels:
        keyboard.append([InlineKeyboardButton(
            text=channel[1],
            callback_data=f"channel_{channel[0]}"
        )])
    keyboard.append([InlineKeyboardButton(
        text="üëàüèΩ –ù–∞–∑–∞–¥",
        callback_data=f"back"
    )])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
        reply_markup=reply_markup
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("channel_"))
async def channel_selected(callback: types.CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    keyboard = [
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data=f"lang_ru_{channel_id}")],
        [InlineKeyboardButton(text="English", callback_data=f"lang_en_{channel_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("back"))
async def channel_selected(callback: types.CallbackQuery, state: FSMContext):
    keyboard = [
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="select_channel")],
        [InlineKeyboardButton(text="–ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="my_links")],
        [InlineKeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
@dp.callback_query(F.data.startswith("changeshortdesc_"))
async def channel_selected(callback: types.CallbackQuery, state: FSMContext):
    link_id = int(callback.data.split("_")[1])
    await state.update_data(link_id=link_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: \n\n–û–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π")
    await state.set_state(ChangeLinkShortDesc.waiting_for_description)
    await callback.answer()

@dp.message(ChangeLinkShortDesc.waiting_for_description)
async def process_description_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    link_id = data["link_id"]
    new_description = message.text

    await db.change_short_desc_link(link_id, new_description)

    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=back_kb)
    await state.clear()

@dp.callback_query(F.data.startswith("changedesc_"))
async def channel_selected(callback: types.CallbackQuery, state: FSMContext):
    link_id = int(callback.data.split("_")[1])
    await state.update_data(link_id=link_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:")
    await state.set_state(ChangeLinkDesc.waiting_for_description)
    await callback.answer()

@dp.message(ChangeLinkDesc.waiting_for_description)
async def process_description_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    link_id = data["link_id"]
    new_description = message.text

    await db.change_link(link_id, new_description)

    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=back_kb)
    await state.clear()

@dp.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: types.CallbackQuery):
    _, lang, channel_id = callback.data.split("_")
    channel_id = int(channel_id)
    channel = await db.get_channel(channel_id)

    temp_link = ""
    id = await db.create_link(callback.from_user.id, channel_id, lang, temp_link)

    link = f"https://t.me/{CHANNEL_GETTER_BOT_LINK}?start={callback.from_user.username}-{channel_id}-{id}"
    await db.update_link(id, link)
    keyboard = [[InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="select_channel")]]
    keyboard.append([InlineKeyboardButton(
        text="üëàüèΩ –ù–∞–∑–∞–¥",
        callback_data=f"back"
    )])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        text=f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel[1]}:\n{link}\n\n"
             f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    user = message.from_user
    if user.username not in ADMIN_USERNAMES:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_free_channel")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_paid_channel")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_delete_channel")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="admin_list_channels")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_link_stats")],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

@dp.callback_query(F.data.startswith("admin_add_"))
async def admin_add_channel_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    is_paid = callback.data == "admin_add_paid_channel"
    await state.update_data(is_paid=is_paid)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminStates.add_channel_name)
    await callback.answer()

@dp.message(AdminStates.add_channel_name)
async def add_channel_name(message: types.Message, state: FSMContext):
    await state.update_data(channel_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminStates.add_channel_ru_link)

@dp.message(AdminStates.add_channel_ru_link)
async def add_channel_ru_link(message: types.Message, state: FSMContext):
    await state.update_data(channel_ru_link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminStates.add_channel_en_link)

@dp.message(AdminStates.add_channel_en_link)
async def add_channel_ru_link(message: types.Message, state: FSMContext):
    await state.update_data(channel_en_link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(AdminStates.add_sub_cost)

@dp.message(AdminStates.add_sub_cost)
async def add_channel_ru_link(message: types.Message, state: FSMContext):
    await state.update_data(add_sub_cost=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞:")
    await state.set_state(AdminStates.add_percent_for_arb)

@dp.message(AdminStates.add_percent_for_arb)
async def add_channel_ru_link(message: types.Message, state: FSMContext):
    await state.update_data(add_percent_for_arb=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ: '-' (–ø—Ä–æ—á–µ—Ä–∫) ")
    await state.set_state(AdminStates.add_description)

@dp.message(AdminStates.add_description)
async def add_channel_ru_link(message: types.Message, state: FSMContext):
    if message.text == "-":
        await state.update_data(add_description="")
    else:
        await state.update_data(add_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ channel id\n(–ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @LeadConverterToolkitBot:\n\n–ü—Ä–∏–º–µ—Ä id: -1002560474274")
    await state.set_state(AdminStates.add_channel_id)

@dp.message(AdminStates.add_channel_id)
async def add_channel_id(message: types.Message, state: FSMContext):
    try:
        channel_id = int(message.text)
        data = await state.get_data()
        is_paid = data.get('is_paid', False)
        
        await db.add_channel(
            data['channel_name'],
            data['channel_ru_link'],
            data['channel_en_link'],
            channel_id,
            data['add_description'],
            data['add_sub_cost'],
            data['add_percent_for_arb'],
            paid=is_paid
        )
        
        keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            f"–ö–∞–Ω–∞–ª '{data['channel_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=reply_markup
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ)")

@dp.callback_query(F.data == "admin_delete_channel")
async def admin_delete_channel(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    channels = await db.get_channels(include_paid=True)
    if not channels:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    keyboard = []
    for channel in channels:
        keyboard.append([InlineKeyboardButton(
            text="üíµ –ü–ª–∞—Ç–Ω—ã–π " + channel[1] if channel[5] else "üìú –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π " + channel[1],
            callback_data=f"delete_channel_{channel[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel_confirm(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    channel_id = int(callback.data.split("_")[2])
    channel = await db.get_channel(channel_id)
    if not channel:
        await callback.message.edit_text("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_channel_{channel_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª '{channel[1]}'?",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_channel_"))
async def delete_channel(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    channel_id = int(callback.data.split("_")[3])
    try:
        await db.delete_channel(channel_id)
        await callback.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

        await admin_list_channels(callback)
    except Exception as e:
        logger.error(f"Error deleting channel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

@dp.callback_query(F.data == "admin_list_channels")
async def admin_list_channels(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    channels = await db.get_channels(include_paid=True)
    text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"

    keyboard = []
    for channel in channels:
        keyboard.append([InlineKeyboardButton(
            text="üíµ –ü–ª–∞—Ç–Ω—ã–π " + channel[1] if channel[5] else "üìú –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π " + channel[1],
            callback_data=f"channeladm_{channel[0]}"
        )])

    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text=text, reply_markup=reply_markup)
    await callback.answer()


@dp.callback_query(F.data.startswith("channeladm_"))
async def view_channel_info(callback: types.CallbackQuery):
    try:
        channel_id = int(callback.data.split("_")[1])
        channel = await db.get_channel(channel_id)
        paid_sub_counter = await db.paid_sub_counter(channel_id)
        free_sub_counter = await db.free_sub_counter(channel_id)
        arb_counter = await db.arb_counter(channel_id)

        text = (
            "üì¢ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ</b>\n\n"
            f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel[1]}\n"
            f"üá∑üá∫ <b>RU —Å—Å—ã–ª–∫–∞:</b> {channel[2]}\n"
            f"üá¨üáß <b>EN —Å—Å—ã–ª–∫–∞:</b> {channel[3]}\n"
            f"üõ∞Ô∏è <b>Channel ID:</b> {channel[4]}\n"
            f"üí∞ <b>–ü–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:</b> {'–î–∞' if channel[5] == 1 else '–ù–µ—Ç'}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {channel[6] or '‚Äî'}\n"
            f"üí∏ <b>–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {channel[7]} —Ä—É–±\n"
            f"üéØ <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {channel[8]}%\n"
            f"üï∞Ô∏è <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {channel[9]}\n\n"

            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"üë• <b>–ü–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {paid_sub_counter}\n"
            f"üôå <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {free_sub_counter}\n"
            f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤:</b> {arb_counter}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"editchannel_{channel[0]}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        print(e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.callback_query(F.data.startswith("editchannel_"))
async def start_edit_channel(callback: types.CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[1])
    await state.set_state(EditChannelState.waiting_for_data)
    await state.update_data(channel_id=channel_id)

    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ '|':\n\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | RU —Å—Å—ã–ª–∫–∞ | EN —Å—Å—ã–ª–∫–∞ | Channel ID | –ü–ª–∞—Ç–Ω—ã–π (0/1) | –û–ø–∏—Å–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ü—Ä–æ—Ü–µ–Ω—Ç</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>MyChannel | https://t.me/ru | https://t.me/en | -100123456789 | 1 | –ú–æ–π –∫–∞–Ω–∞–ª | 999 | 30</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(EditChannelState.waiting_for_data)
async def save_channel_data(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data["channel_id"]

    try:
        parts = [p.strip() for p in message.text.split("|")]
        if len(parts) != 8:
            await message.answer("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ 8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö '|'.")
            return

        name, ru_link, en_link, tg_channel_id, paid, description, price, procent = parts

        await db.update_channel_adm(
            channel_id=channel_id,
            name=name,
            ru_link=ru_link,
            en_link=en_link,
            tg_channel_id=int(tg_channel_id),
            paid=int(paid),
            description=description,
            price_subscription=int(price),
            arb_procent=int(procent)
        )

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await state.clear()

    except Exception as e:
        print(e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")


@dp.callback_query(F.data == "admin_cancel")
async def admin_cancel(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_free_channel")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_paid_channel")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_delete_channel")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="admin_list_channels")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_link_stats")],

    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await callback.answer()
        return
    
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_free_channel")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_add_paid_channel")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_delete_channel")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="admin_list_channels")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_link_stats")],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_link_"))
async def delete_link_confirm(callback: types.CallbackQuery):
    link = callback.data.replace("delete_link_", "")
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{link}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É {link}?",
        reply_markup=reply_markup
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def delete_link(callback: types.CallbackQuery):
    link = callback.data.replace("confirm_delete_", "")
    print(link)
    try:
        await db.delete_link(link)
        await callback.message.edit_text("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=back_kb)

    except Exception as e:
        logger.error(f"Error deleting link: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")

@dp.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer()
        return

    try:
        paid_count, top_arbitrage = await db.get_admin_statistics()


        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        stats_text += f"üí∞ –ü–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {paid_count}\n\n"
        stats_text += "üèÜ –¢–æ–ø 5 –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤:\n"
        
        for i, (username, count) in enumerate(top_arbitrage, 1):
            stats_text += f"{i}. @{username}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"

        keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(stats_text, reply_markup=reply_markup)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer()



@dp.callback_query(F.data == "user_stats")
async def ask_username(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer()
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞ (–±–µ–∑ @):")
    await state.set_state(AdminStats.waiting_for_username)
    await callback.answer()


@dp.message(AdminStats.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")

    try:
        paid, free, profit = await db.get_month_profit_by_username(username)
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ @{username} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n\n"
            f"üí≥ <b>–ü–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {paid}\n"
            f"üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {free}\n"
            f"üíµ <b>–î–æ—Ö–æ–¥:</b> {profit:.2f} —Ä—É–±"
        )

        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(text, reply_markup=reply_markup, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è @{username}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username.")

    await state.clear()




@dp.callback_query(F.data == "my_stats")
async def my_stats(callback: types.CallbackQuery):
    try:
        paid_all, free_all, links_count = await db.get_user_stats_ever(callback.from_user.id)
        paid_month, free_month, profit_month = await db.get_month_profit(callback.from_user.id)

        text = (
            "üìä <b>–í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üîó <b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫:</b> {links_count}\n"
            f"üí≥ <b>–í—Å–µ–≥–æ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {paid_all}\n"
            f"üÜì <b>–í—Å–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {free_all}\n\n"

            "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</b>\n\n"
            f"üí≥ <b>–ü–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {paid_month}\n"
            f"üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {free_month}\n"
            f"üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> {profit_month:.2f} —Ä—É–±\n"
        )

        keyboard = [
            [InlineKeyboardButton(text="üìé –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="my_links")],
            [InlineKeyboardButton(text="üëàüèΩ –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        await callback.answer("")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ my_stats:", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.callback_query(F.data == "users_link_stats")
async def ask_username(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMIN_USERNAMES:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await callback.answer()
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞ (–±–µ–∑ @):")
    await state.set_state(AdminLinkStats.waiting_for_username_l)
    await callback.answer()

@dp.message(AdminLinkStats.waiting_for_username_l)
async def admin_links_stats(message: types.Message, state: FSMContext):
    try:
        username = message.text.strip().lstrip("@")
        user = await db.get_user(username)
        user_id = user[0]
        links = await db.get_links(user_id=user_id)
        if not links:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!", reply_markup=back_kb)
            return

        keyboard = []
        for link in links:
            arbitrage_username, channel_id, link_id = link[4].split('-')
            channel = await db.get_channel(channel_id)
            keyboard.append([InlineKeyboardButton(
                text=channel[1] + " " + link[3] + " " + link[7],
                callback_data=f"link_{link[0]}"
            )])
        keyboard.append([InlineKeyboardButton(
            text="üëàüèΩ –ù–∞–∑–∞–¥",
            callback_data=f"back"
        )])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:",
            reply_markup=reply_markup
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ my_stats:", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await state.clear()

async def main():
    await db.init_db()

    await dp.start_polling(bot)

def run_bot():
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Error running bot: {e}")

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--subprocess':
        asyncio.run(main())
    else:
        run_bot() 